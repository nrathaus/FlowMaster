# Project Description as of 07/04/2025

## Overview:
FlowMaster is a high-performance, multithreaded server system designed for efficient load balancing and real-time monitoring. The architecture employs multiple content servers (ports 8000-8002) with a central routing server (port 8080) that implements intelligent load distribution algorithms. A dedicated monitoring server (port 8081) provides comprehensive real-time analytics through an authenticated web interface. 
The system features robust session management with secure login/logout functionality and administrator controls. Advanced capabilities include automatic detection and cleanup of inactive sessions, configurable server capacity limits, and graceful shutdown handling. Built with scalability in mind, the architecture supports horizontal scaling by simply adding more content servers. 
Performance optimizations include thread-safe state management, efficient socket handling, and minimal overhead routing. The implementation uses Python's threading module for concurrent request processing while maintaining data consistency through proper locking mechanisms. All server activity is logged for debugging and auditing purposes, with configurable log levels and output destinations.

Key benefits include:
- Intelligent load balancing across multiple servers
- Real-time monitoring and analytics dashboard
- Secure authentication and session management
- Automatic cleanup of inactive sessions
- Horizontal scalability for growing demand
- Comprehensive logging and debugging support

## Technical Architecture:
- **Communication Protocol:** Utilizes TCP sockets for reliable client-server communication, ensuring that data packets are delivered in order and without loss.
- **Concurrency Model:** Implements thread-based concurrency to handle multiple simultaneous connections, allowing the server to efficiently manage numerous clients without blocking.
- **State Management:** Maintains shared state with thread-safe mechanisms to prevent data races and ensure consistency across threads.
- **Load Balancing:** Provides load balancing through a routing server architecture, which intelligently directs incoming requests to the least busy server.
- **User Activity Tracking:** Implements a heartbeat mechanism for user activity tracking, allowing the server to monitor user engagement and remove inactive sessions.
- **Monitoring:** Includes a monitoring server for real-time statistics with authenticated access, enabling administrators to view server performance and user activity.
- **Routing Delay:** Implements a delay mechanism in the routing server to ensure even distribution of client requests.
- **Security:** Features a secure login system with username/password authentication and session management.

## What it does:
1. **Port Check:** Ensures all required ports are available before startup.
2. **Static Servers:** Serves HTML files from different ports.
3. **Routing Server:** A main server (port ROUTING_PORT) that directs clients to the least busy server with a delay mechanism.
4. **Monitoring Server:** Provides real-time data about server load and active users behind authentication.
5. **User Tracking:** Regularly updates the list of active users and removes inactive ones.
6. **Authentication:** Implements secure login with username/password verification.
7. **Session Management:** Tracks authenticated sessions using session IDs and cookies.
8. **User Management:** Allows administrators to disconnect users and deny access.
9. **Graceful Shutdown:** Logs active users before exiting when stopped.

## Main Components:

### Python Files:

1. **FlowMaster.py:**
   - **Purpose:** Main server implementation handling all core functionality.
   - **Functionality:** 
     - Implements TCP protocol for reliable data transfer
     - Provides thread-safe mechanisms for shared resource access
     - Manages system signals for graceful shutdown
     - Tracks user sessions and activity timeouts
     - Records server activities and errors
     - Validates user credentials
     - Implements load balancing and routing

2. **FlowMasterClasses.py:**
   - **Purpose:** Contains core classes used by the server.
   - **Functionality:**
     - Database integration with SQLite
     - User session management
     - Logging functionality

### HTML Files:

1. **index1.html**: Displays server statistics for Port 8000, including active user counts and client ID.
2. **index2.html**: Similar to `index1.html`, but for Port 8001.
3. **index3.html**: Similar to `index1.html`, but for Port 8002.
4. **login.html**: Provides a login form for users to enter their credentials and access the server stats monitor.
5. **tracker.html**: The main monitoring dashboard that displays real-time statistics, including total active users and individual server connections.
6. **disconnect.html**: Page shown when a user is disconnected by an administrator.
7. **loading.html**: Page shown when all servers are busy and client must wait.

## PUP.db Overview:
PUP.db [Project Usernames Passwords] is a database file used for storing user credentials and permissions. It contains the following table:

### Permissions Table:
- **PermissionNum**: INTEGER PRIMARY KEY, UNIQUE, NOT NULL
- **CanView**: TEXT, NOT NULL
- **CanDisconnect**: TEXT, NOT NULL
### UserPassPerm Table:
- **Username**: TEXT PRIMARY KEY, UNIQUE, NOT NULL
- **Password**: TEXT, NOT NULL
- **Perm**: INTEGER, NOT NULL (references PermissionNum in Permissions table)

## Key Components Explained:

### Python Imports in `FlowMaster.py`:
- **json**: Used for parsing and generating JSON data (stats, login requests)
- **signal**: Handles graceful shutdown via SIGINT (Ctrl+C)
- **socket**: Core networking for TCP server implementation
- **sys**: System-specific functions (exit handling)
- **threading**: Enables concurrent request handling
- **time**: Timing functions (delays, timeouts)
- **datetime/timedelta**: Tracks user activity timestamps
- **FlowMasterClasses**: Custom classes for database, logging and session management

### Python Functions in `FlowMaster.py` (Alphabetical):
- **can_disconnect(username, USERNAMES, PERMISSIONS)**: Checks if user has disconnect permissions
- **fetchCurrentUser(session_id)**: Gets username from session ID
- **get_monitoring_data()**: Collects stats for monitoring dashboard
- **get_server_loads()**: Returns current user counts per server
- **handle_login_request(client_socket, data)**: Processes login POST requests
- **handle_logout()**: Clears current user session
- **handle_monitor_request(client_socket, file_path, port)**: Handles monitoring server requests
- **handle_stats_request(client_socket)**: Serves monitoring stats in JSON
- **handle_user_request(client_socket, file_path, port)**: Handles content server requests
- **main()**: Entry point that starts all server components
- **monitoring_server()**: Runs monitoring dashboard server
- **select_target_port()**: Load balancing algorithm implementation
- **send_file(file_path, client_socket)**: Serves files with HTTP headers
- **send_redirect(client_socket, port)**: Sends HTTP redirect response
- **send_redirect_to_login(client_socket)**: Redirects to login page
- **signal_handler(*_)**: Graceful shutdown handler
- **start_routing_server()**: Main load balancer implementation
- **start_static_servers(max_connections)**: Launches all content servers
- **static_server(port, file_path, max_connections)**: Runs a content server
- **test_ports()**: Verifies required ports are available
- **update_active_users()**: Background task to clean inactive users
- **user_info()**: Endpoint to fetch current username

### JavaScript Functions in `main.js`:
- **createServerCard(port)**: Creates a card element for displaying statistics for a specific server port.
- **createUserListItem(userId, port)**: Generates a list item for a user with a disconnect button.
- **fetchCurrentUser()**: Fetches and displays the current user's information.
- **disconnectUser(userId, port)**: Handles the disconnection of a user from the server.
- **fetchStats()**: Fetches and updates server statistics, including active user counts.
- **filterHostIp(data)**: Filters out the host IP from the statistics data.
- **drawLineGraph(svgId, data, options)**: Draws a line graph for visualizing data.
- **drawStackedAreaGraph(svgId, data)**: Draws a stacked area graph for visualizing data.
- **updateGraphs()**: Updates the graphs with the latest data.
- **logout()**: Handles user logout functionality.
- **onPageLoad()**: Initializes the page and fetches initial data.
- **handleLoginResponse(response)**: Processes login response and redirects if successful.
- **setupEventListeners()**: Configures event handlers for UI elements.
- **updateServerCards(stats)**: Updates server card displays with current statistics.
- **updateUserList(stats)**: Updates the list of connected users.

## Configuration Constants Explained:
- **IP:** Server's IP address (automatically detected).
- **PORTS:** Available ports for static content (8000, 8001, 8002).
- **ROUTING_PORT:** Load balancer port (8080).
- **MONITORING_PORT:** Monitoring server port (8081).
- **SOCKET_TIMEOUT:** Client connection timeout (5 seconds).
- **FILE_PATHS:** Locations of HTML files to serve and database file.
- **USERNAMES:** Dictionary of allowed username/password pairs loaded from the database.
- **HEARTBEAT_INTERVAL:** User activity check frequency (2.5 seconds).
- **TIMEOUT_THRESHOLD:** User inactivity limit (1800 seconds).
- **DELAY_BETWEEN_ROUTING:** Delay applied before redirecting clients.

## Shared State Management:
- **active_users:** Dictionary tracking user activity per port.
- **denied_users:** Dictionary tracking users denied access.
- **users_lock:** Thread lock for active_users access.
- **client_sockets:** Dictionary tracking active socket connections.
- **connected_clients:** Set of all client identifiers.
- **clients_lock:** Thread lock for connected_clients access.
- **authenticated_sessions:** Dictionary tracking valid login sessions.

## Logging Configuration:
- **Log Output:** Logs to both file (server.log) and console.
- **Log Details:** Includes timestamps and log levels.
- **Event Tracking:** Captures important events and errors.
