# Project Description as of 19/03/2025

## Overview:
This is a multithreaded server designed to handle multiple client requests simultaneously. It serves HTML files from different ports and directs clients to the appropriate server based on current load. The system tracks active users, removes inactive ones, and includes a monitoring server to track real-time user activity and server load. It implements a delay mechanism for routing to ensure balanced load distribution and features a secure login system with authentication and session management. The architecture is designed to be scalable, allowing for easy addition of new features and servers as demand increases.

## Technical Architecture:
- **Communication Protocol:** Utilizes TCP sockets for reliable client-server communication, ensuring that data packets are delivered in order and without loss.
- **Concurrency Model:** Implements thread-based concurrency to handle multiple simultaneous connections, allowing the server to efficiently manage numerous clients without blocking.
- **State Management:** Maintains shared state with thread-safe mechanisms to prevent data races and ensure consistency across threads.
- **Load Balancing:** Provides load balancing through a routing server architecture, which intelligently directs incoming requests to the least busy server.
- **User Activity Tracking:** Implements a heartbeat mechanism for user activity tracking, allowing the server to monitor user engagement and remove inactive sessions.
- **Monitoring:** Includes a monitoring server for real-time statistics with authenticated access, enabling administrators to view server performance and user activity.
- **Routing Delay:** Implements a delay mechanism in the routing server to ensure even distribution of client requests.
- **Security:** Features a secure login system with username/password authentication and session management.

## What it does:
1. **Port Check:** Ensures all required ports are available before startup.
2. **Static Servers:** Serves HTML files from different ports.
3. **Routing Server:** A main server (port ROUTING_PORT) that directs clients to the least busy server with a delay mechanism.
4. **Monitoring Server:** Provides real-time data about server load and active users behind authentication.
5. **User Tracking:** Regularly updates the list of active users and removes inactive ones.
6. **Authentication:** Implements secure login with username/password verification.
7. **Session Management:** Tracks authenticated sessions using session IDs and cookies.
8. **User Management:** Allows administrators to disconnect users and deny access.
9. **Graceful Shutdown:** Logs active users before exiting when stopped.

## Main Components:

### Python Files:

1. **socket_module.py:**
   - **Purpose:** Handles network communication.
   - **Functionality:** Implements TCP protocol for reliable data transfer.

2. **threading_module.py:**
   - **Purpose:** Enables concurrent handling of multiple clients.
   - **Functionality:** Provides thread-safe mechanisms for shared resource access.

3. **signal_module.py:**
   - **Purpose:** Manages system signals for graceful shutdown.

4. **time_module.py:**
   - **Purpose:** Manages user session timeouts and activity tracking.

5. **logging_module.py:**
   - **Purpose:** Records server activities and errors.

6. **authentication_module.py:**
   - **Purpose:** Validates user credentials.

7. **session_management_module.py:**
   - **Purpose:** Tracks authenticated sessions.

8. **database_integration_module.py:**
   - **Purpose:** Integrates with SQLite for user credential storage.

### HTML Files:

1. **index1.html**: Displays server statistics for Port 8000, including active user counts and client ID.
2. **index2.html**: Similar to `index1.html`, but for Port 8001.
3. **index3.html**: Similar to `index1.html`, but for Port 8002.
4. **login.html**: Provides a login form for users to enter their credentials and access the server stats monitor.
5. **tracker.html**: The main monitoring dashboard that displays real-time statistics, including total active users and individual server connections.

The files `dashboard.html` and `error.html` do not exist in the current working directory.

## PUP.db Overview:
PUP.db [Project Usernames Passwords] is a database file used for storing user credentials and permissions. It contains the following table:

### Permissions Table:
- **PermissionNum**: INTEGER PRIMARY KEY, UNIQUE, NOT NULL
- **CanView**: TEXT, NOT NULL
- **CanDisconnect**: TEXT, NOT NULL

## Key Functions Explained:
### JavaScript Functions in `main.js`:
- **createServerCard(port)**: Creates a card element for displaying statistics for a specific server port.
- **createUserListItem(userId, port)**: Generates a list item for a user with a disconnect button.
- **fetchCurrentUser()**: Fetches and displays the current user's information.
- **disconnectUser(userId, port)**: Handles the disconnection of a user from the server.
- **fetchStats()**: Fetches and updates server statistics, including active user counts.
- **filterHostIp(data)**: Filters out the host IP from the statistics data.
- **drawLineGraph(svgId, data, options)**: Draws a line graph for visualizing data.
- **drawStackedAreaGraph(svgId, data)**: Draws a stacked area graph for visualizing data.
- **updateGraphs()**: Updates the graphs with the latest data.
- **logout()**: Handles user logout functionality.
- **onPageLoad()**: Initializes the page and fetches initial data.

## Configuration Constants Explained:
- **IP:** Server's IP address (automatically detected).
- **PORTS:** Available ports for static content (8000, 8001, 8002).
- **ROUTING_PORT:** Load balancer port (8080).
- **MONITORING_PORT:** Monitoring server port (8081).
- **SOCKET_TIMEOUT:** Client connection timeout (5 seconds).
- **FILE_PATHS:** Locations of HTML files to serve and database file.
- **USERNAMES:** Dictionary of allowed username/password pairs loaded from the database.
- **HEARTBEAT_INTERVAL:** User activity check frequency (2.5 seconds).
- **TIMEOUT_THRESHOLD:** User inactivity limit (1800 seconds).
- **DELAY_BETWEEN_ROUTING:** Delay applied before redirecting clients.

## Shared State Management:
- **active_users:** Dictionary tracking user activity per port.
- **denied_users:** Dictionary tracking users denied access.
- **users_lock:** Thread lock for active_users access.
- **client_sockets:** Dictionary tracking active socket connections.
- **connected_clients:** Set of all client identifiers.
- **clients_lock:** Thread lock for connected_clients access.
- **authenticated_sessions:** Dictionary tracking valid login sessions.

## Logging Configuration:
- **Log Output:** Logs to both file (server.log) and console.
- **Log Details:** Includes timestamps and log levels.
- **Event Tracking:** Captures important events and errors.
