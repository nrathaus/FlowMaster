# Updated Project Description for FlowMaster

## Overview:
FlowMaster is a cutting-edge, high-performance multithreaded server system meticulously engineered for optimal load balancing and real-time monitoring of server activities. The architecture is designed to handle a significant volume of concurrent requests, consisting of multiple content servers operating on ports 8000 to 8002. These servers are efficiently managed by a central routing server on port 8080, which employs sophisticated load distribution algorithms to ensure that client requests are directed to the least busy server, thereby enhancing overall system responsiveness and reliability. 

In addition to the content servers, a dedicated monitoring server on port 8081 provides comprehensive real-time analytics through a secure, authenticated web interface. This interface allows administrators to gain insights into server performance metrics, user activity, and system health, enabling proactive management and optimization of resources.

The system is designed with robust session management capabilities, featuring secure login/logout functionality and administrative controls that empower system operators to manage user access effectively. Advanced capabilities include automatic detection and cleanup of inactive sessions, configurable server capacity limits, and graceful shutdown handling to ensure that the system can be maintained without disrupting active users. FlowMaster is built for scalability, allowing for horizontal scaling by simply adding more content servers to meet growing demands, making it an ideal solution for environments with fluctuating workloads.

Performance optimizations are achieved through thread-safe state management, efficient socket handling, and minimal overhead routing. The implementation utilizes Python's threading module for concurrent request processing while ensuring data consistency through proper locking mechanisms. All server activity is logged for debugging and auditing purposes, with configurable log levels and output destinations, providing transparency and accountability in server operations.

Key benefits include:
- Intelligent load balancing across multiple servers to optimize resource utilization.
- Real-time monitoring and analytics dashboard that provides actionable insights.
- Secure authentication and session management to protect user data and access.
- Automatic cleanup of inactive sessions to maintain system performance.
- Horizontal scalability for growing demand, allowing for seamless expansion.
- Comprehensive logging and debugging support to facilitate troubleshooting and maintenance.

## Technical Architecture:
- **Communication Protocol:** FlowMaster utilizes TCP sockets for reliable client-server communication, ensuring that data packets are delivered in order and without loss. This reliability is crucial for maintaining the integrity of user sessions and server interactions.
- **Concurrency Model:** The system implements a thread-based concurrency model to handle multiple simultaneous connections, allowing the server to efficiently manage numerous clients without blocking. This model enhances the responsiveness of the server, enabling it to serve requests promptly.
- **State Management:** FlowMaster maintains shared state with thread-safe mechanisms to prevent data races and ensure consistency across threads. This is essential for accurate tracking of user sessions and server loads.
- **Load Balancing:** The architecture provides load balancing through a routing server that intelligently directs incoming requests to the least busy server, optimizing resource allocation and improving response times.
- **User  Activity Tracking:** A heartbeat mechanism is implemented for user activity tracking, allowing the server to monitor user engagement and remove inactive sessions automatically. This feature helps maintain an accurate count of active users and optimizes server performance.
- **Monitoring:** The monitoring server is equipped with real-time statistics and authenticated access, enabling administrators to view server performance and user activity. This visibility is critical for making informed decisions about resource allocation and system adjustments.
- **Routing Delay:** A delay mechanism is implemented in the routing server to ensure even distribution of client requests, preventing any single server from becoming overwhelmed and ensuring a smooth user experience.
- **Security:** FlowMaster features a secure login system with username/password authentication and session management, safeguarding user data and ensuring that only authorized personnel can access sensitive information.

## What it does:
1. **Port Check:** The system performs a thorough check to ensure all required ports are available before startup, preventing potential conflicts and ensuring smooth operation.
2. **Static Servers:** FlowMaster serves HTML files from different ports, providing users with access to various resources and information.
3. **Routing Server:** The main server (port ROUTING_PORT) directs clients to the least busy server using a sophisticated delay mechanism, optimizing load distribution and enhancing user experience.
4. **Monitoring Server:** This server provides real-time data about server load and active users, accessible only behind authentication, ensuring that sensitive information is protected.
5. **User  Tracking:** The system regularly updates the list of active users and removes inactive ones, maintaining an accurate representation of user engagement and optimizing resource allocation.
6. **Authentication:** FlowMaster implements secure login with username/password verification, ensuring that only authorized users can access the system.
7. **Session Management:** The system tracks authenticated sessions using session IDs and cookies, providing a seamless experience for users while maintaining security.
8. **User  Management:** Administrators have the ability to disconnect users and deny access, allowing for effective management of user sessions and security.
9. **Graceful Shutdown:** The system logs active users before exiting when stopped, ensuring that no data is lost and that users are informed of the shutdown.

## Main Components:

### Python Files:

1. **FlowMaster.py:**
   - **Purpose:** This is the main server implementation that handles all core functionality of the FlowMaster system.
   - **Functionality:** 
     - Implements the TCP protocol for reliable data transfer, ensuring that all communications are secure and efficient.
     - Provides thread-safe mechanisms for shared resource access, preventing data corruption and ensuring consistency.
     - Manages system signals for graceful shutdown, allowing the server to close down without disrupting active sessions.
     - Tracks user sessions and activity timeouts, ensuring that inactive users are logged out appropriately.
     - Records server activities and errors, providing valuable data for debugging and auditing.
     - Validates user credentials during login attempts, ensuring that only authorized users can access the system.
     - Implements load balancing and routing to optimize server performance and user experience.

2. **FlowMasterClasses.py:**
   - **Purpose:** This file contains core classes used by the server, encapsulating essential functionalities.
   - **Functionality:**
     - Integrates with a SQLite database for persistent storage of user credentials and permissions.
     - Manages user sessions effectively, ensuring that user data is handled securely.
     - Provides logging functionality to track server activities and errors, facilitating maintenance and troubleshooting.

### HTML Files:

1. **index1.html**: Displays server statistics for Port 8000, including active user counts and client ID, providing users with real-time insights into server performance.
2. **index2.html**: Similar to `index1.html`, but specifically designed for Port 8001, ensuring that users can access relevant statistics for each server.
3. **index3.html**: Similar to `index1.html`, but tailored for Port 8002, maintaining consistency across the user interface while providing specific data.
4. **login.html**: This file provides a user-friendly login form for users to enter their credentials and access the server stats monitor, ensuring a secure entry point.
5. **tracker.html**: The main monitoring dashboard that displays real-time statistics, including total active users and individual server connections, allowing administrators to monitor system health effectively.
6. **disconnect.html**: A page shown when a user is disconnected by an administrator, providing clear communication about session termination.
7. **loading.html**: This page is displayed when all servers are busy, informing clients that they must wait for resources to become available.

## PUP.db Overview:
PUP.db [Project Usernames Passwords] is a database file used for securely storing user credentials and permissions. It contains the following table:

### Permissions Table:
- **PermissionNum**: INTEGER PRIMARY KEY, UNIQUE, NOT NULL - A unique identifier for each permission level.
- **CanView**: TEXT, NOT NULL - Indicates whether the user can view certain resources.
- **CanDisconnect**: TEXT, NOT NULL - Indicates whether the user has the authority to disconnect other users.

### UserPassPerm Table:
- **Username**: TEXT PRIMARY KEY, UNIQUE, NOT NULL - The unique username for each user.
- **Password**: TEXT, NOT NULL - The hashed password associated with the username.
- **Perm**: INTEGER, NOT NULL (references PermissionNum in Permissions table) - Links the user to their permission level.

## Key Components Explained:

## Imported Modules and Their Usage:
- **json**: Used for parsing and generating JSON data, facilitating communication between the server and clients (e.g., stats, login requests).
- **signal**: Handles graceful shutdown via SIGINT (Ctrl+C), ensuring that the server can close down cleanly.
- **socket**: Core networking library for implementing the TCP server, enabling reliable communication.
- **sys**: Provides system-specific functions, including exit handling for the server.
- **threading**: Enables concurrent request handling, allowing the server to manage multiple clients simultaneously.
- **time**: Provides timing functions for managing delays and timeouts within the server.
- **datetime/timedelta**: Used to track user activity timestamps, ensuring accurate session management.
- **hashlib**: Used for hashing usernames and passwords for secure authentication.
- **FlowMasterClasses**: Custom classes for database interaction, logging, session management, and file handling, encapsulating essential functionalities.

## Classes in `FlowMasterClasses.py` and Their Usage:

### 1. **Class: `dtbs` "Database"**
   - **Purpose**: Handles database interactions.
   - **Where it's used in `FlowMaster.py`**:
     - Instantiated twice to manage user credentials and permissions:
       - `USERNAMES`: Stores and retrieves hashed usernames and passwords from the `UserPassPerm` table.
       - `PERMISSIONS`: Stores and retrieves user permissions from the `Permissions` table.
     - Example Use Cases:
       - Validating user login credentials during `HandleLoginRequest(client_socket, data)`.
       - Checking user permissions for actions like disconnecting other users.

   - **Key Methods**:
     - `GetSecondOfArray(username)`: Retrieves a specific permission for a user (used to check if a user can disconnect others).

### 2. **Class: `usrson` "User Session"**
   - **Purpose**: Manages user sessions.
   - **Where it's used in `FlowMaster.py`**:
     - Instantiated as `USER_SESSION_MANAGER` to handle session creation, validation, and destruction:
       - Used for creating sessions during login in `HandleLoginRequest(client_socket, data)`.
       - Validates session IDs for authenticated requests in `HandleMonitorRequest(client_socket, file_path, port)`.
       - Destroys sessions during logout in `HandleLogout()`.
     - Example Use Cases:
       - Maintaining session IDs for logged-in users.
       - Ensuring that only authenticated users can access sensitive features like server monitoring.

   - **Key Methods**:
     - `CreateSession(username)`: Generates a session ID for a user.
     - `ValidateSession(session_id)`: Verifies if a session is still active.
     - `DestroySession(session_id)`: Deletes a session.
     - `GetUsername(session_id)`: Retrieves the username associated with a session.

### 3. **Class: `lggr` "Logger"**
   - **Purpose**: Provides logging functionality.
   - **Where it's used in `FlowMaster.py`**:
     - Instantiated as `LOGGER` to log server activities, errors, and user actions to both a file and the console:
       - Logs critical events like server startup, shutdown, and errors.
       - Tracks user activity, such as successful logins and failed login attempts (`HandleLoginRequest`).
       - Logs server performance metrics and user activity updates (`UpdateActiveUsers()`).
     - Example Use Cases:
       - Debugging unexpected server behavior.
       - Auditing user activities for security purposes.

   - **Key Methods**:
     - `LogInfo(message)`: Logs general information (e.g., server startup).
     - `LogWarning(message)`: Logs warnings (e.g., socket timeouts).
     - `LogError(message)`: Logs errors (e.g., issues with file access or database connections).

### 4. **Class: `flmngr` "Filemanager"**
   - **Purpose**: Handles file operations.
   - **Where it's used in `FlowMaster.py`**:
     - Used for reading, writing, and verifying the existence of files:
       - Read HTML files to serve content (e.g., `SendFile(file_path, client_socket)`).
       - Check if configuration files or resources exist during server initialization.
     - Example Use Cases:
       - Serving static HTML pages like `tracker.html`, `login.html`, and `disconnect.html`.
       - Ensuring essential files are available before starting the server.

   - **Key Methods**:
     - `ReadFile(file_path)`: Reads and returns the content of a file (e.g., HTML files).
     - `WriteFile(file_path, content)`: Writes content to a file.
     - `FileExists(file_path)`: Checks if a file exists before attempting to read it.

## Functions in `FlowMaster.py`:
1. **`TestPorts()`**: Checks if all required ports are available before starting servers.
2. **`SignalHandler(*_)`**: Handles graceful shutdown on SIGINT (Ctrl+C).
3. **`Hash(string)`**: Generates an MD5 hash for the input string.
4. **`UpdateActiveUsers()`**: Removes inactive users based on their last activity timestamp.
5. **`GetServerLoads()`**: Returns the current number of active users on each server.
6. **`GetQueueData()`**: Provides data about the current queue of users waiting to connect.
7. **`GetMonitoringData()`**: Returns real-time statistics about server loads and the user queue.
8. **`SelectTargetPort(client_id=None)`**: Implements load balancing by selecting the least busy server.
9. **`SendRedirect(client_socket, port)`**: Sends an HTTP redirect response to the client.
10. **`SendFile(file_path, client_socket)`**: Serves a file along with appropriate HTTP headers.
11. **`HandleQueueRequest(client_socket)`**: Handles requests for queue statistics and sends them to the client.
12. **`HandleStatsRequest(client_socket)`**: Handles requests for monitoring statistics and sends JSON data.
13. **`HandleUserRequest(client_socket, file_path, port)`**: Manages incoming HTTP requests from users.
14. **`HandleMonitorRequest(client_socket, file_path, port)`**: Manages incoming HTTP requests for monitoring data.
15. **`SendRedirectToLogin(client_socket)`**: Redirects unauthenticated users to the login page.
16. **`HandleLoginRequest(client_socket, data)`**: Processes login requests and validates user credentials.
17. **`MonitoringServer()`**: Starts the monitoring server that provides the dashboard and stats API.
18. **`StartRoutingServer()`**: Starts the routing server (load balancer) that redirects clients to content servers.
19. **`StaticServer(port, file_path, max_connections)`**: Serves static HTML content on a specified port.
20. **`StartStaticServers(max_connections=None)`**: Initializes all static content servers.
21. **`FetchCurrentUser(session_id)`**: Retrieves the username associated with a session ID.
22. **`main()`**: The entry point for the server application, initializing all components and servers.

### JavaScript Functions in `main.js`:
- **createServerCard(port)**: Creates a card element for displaying statistics for a specific server port, enhancing the user interface.
- **createUser ListItem(userId, port)**: Generates a list item for a user with a disconnect button, allowing administrators to manage users easily.
- **fetchCurrentUser ()**: Fetches and displays the current user's information, providing a personalized experience.
- **disconnectUser (userId, port)**: Handles the disconnection of a user from the server, enabling administrators to manage user sessions effectively.
- **fetchStats()**: Fetches and updates server statistics, including active user counts, ensuring that the dashboard reflects real-time data.
- **filterHostIp(data)**: Filters out the host IP from the statistics data, providing a clearer view of user activity.
- **drawLineGraph(svgId, data, options)**: Draws a line graph for visualizing data trends, enhancing the analytics dashboard.
- **drawStackedAreaGraph(svgId, data)**: Draws a stacked area graph for visualizing data distributions, providing insights into server performance.
- **updateGraphs()**: Updates the graphs with the latest data, ensuring that visualizations are current and accurate.
- **logout()**: Handles user logout functionality, ensuring that sessions are terminated securely.
- **onPageLoad()**: Initializes the page and fetches initial data, setting up the user interface for interaction.
- **handleLoginResponse(response)**: Processes the login response and redirects users if successful, enhancing user experience.
- **setupEventListeners()**: Configures event handlers for UI elements, ensuring that the interface is interactive and responsive.
- **updateServerCards(stats)**: Updates server card displays with current statistics, providing real-time insights into server performance.
- **updateUser List(stats)**: Updates the list of connected users, ensuring that administrators have accurate information.

## Configuration Constants Explained:
- **IP:** The server's IP address is automatically detected, ensuring that the system can adapt to different network environments.
- **PORTS:** A list of available ports for static content (8000, 8001, 8002) is defined, allowing for easy configuration of server resources.
- **ROUTING_PORT:** The load balancer port (8080) is specified, directing traffic to the appropriate content servers.
- **MONITORING_PORT:** The monitoring server port (8081) is defined, providing a dedicated interface for real-time analytics.
- **SOCKET_TIMEOUT:** The client connection timeout is set to 5 seconds, ensuring that inactive connections are closed promptly.
- **FILE_PATHS:** Locations of HTML files to serve and the database file are specified, facilitating easy access to resources.
- **USERNAMES:** A dictionary of allowed username/password pairs is loaded from the database, ensuring secure authentication.
- **HEARTBEAT_INTERVAL:** The user activity check frequency is set to 2.5 seconds, allowing for timely updates on user engagement.
- **TIMEOUT_THRESHOLD:** The user inactivity limit is set to 1800 seconds, ensuring that inactive sessions are cleaned up efficiently.
- **DELAY_BETWEEN_ROUTING:** A delay is applied before redirecting clients, ensuring even distribution of requests across servers.

## Shared State Management:
- **active_users:** A dictionary tracking user activity per port, providing real-time insights into server load.
- **denied_users:** A dictionary tracking users denied access, enhancing security and management capabilities.
- **users_lock:** A thread lock for active_users access, ensuring that data integrity is maintained during concurrent operations.
- **client_sockets:** A dictionary tracking active socket connections, facilitating efficient resource management.
- **connected_clients:** A set of all client identifiers, allowing for easy tracking of active sessions.
- **clients_lock:** A thread lock for connected_clients access, ensuring that concurrent modifications do not lead to data corruption.
- **authenticated_sessions:** A dictionary tracking valid login sessions, providing a secure mechanism for user management.

## Logging Configuration:
- **Log Output:** The system logs to both a file (server.log) and the console, providing multiple avenues for monitoring server activity.
- **Log Details:** Each log entry includes timestamps and log levels, facilitating easy identification of issues and events.
- **Event Tracking:** The logging system captures important events and errors, providing valuable data for debugging and system maintenance.

## Main Components:

### Python Files:

1. **FlowMaster.py:**
   - **Purpose**: This is the main server implementation that handles all core functionality of the FlowMaster system.
   - **Functionality**:
     - Implements the TCP protocol for reliable data transfer.
     - Provides thread-safe mechanisms for shared resource access.
     - Manages system signals for graceful shutdown.
     - Tracks user sessions and activity timeouts.
     - Records server activities and errors.
     - Validates user credentials during login attempts.
     - Implements load balancing and routing.

2. **FlowMasterClasses.py:**
   - **Purpose**: Encapsulates essential functionalities into reusable classes.
   - **Functionality**:
     - Database interaction for user authentication and permissions.
     - Session management for user tracking and validation.
     - Logging for debugging and audit trails.
     - File management for reading/writing resources.

### HTML Files:

1. **index1.html**: Displays server statistics for Port 8000.
2. **index2.html**: Displays server statistics for Port 8001.
3. **index3.html**: Displays server statistics for Port 8002.
4. **login.html**: Provides a login form for secure access.
5. **tracker.html**: Shows real-time server statistics.
6. **disconnect.html**: Communicates session termination.
7. **loading.html**: Informs users when all servers are busy.

## PUP.db Overview:
PUP.db (Project Usernames Passwords) is a database used for securely storing user credentials and permissions.

### Permissions Table:
- **PermissionNum**: Unique identifier for each permission level.
- **CanView**: Indicates whether the user can view resources.
- **CanDisconnect**: Indicates whether the user can disconnect other users.

### UserPassPerm Table:
- **Username**: Unique username for each user.
- **Password**: Hashed password associated with the username.
- **Perm**: Links the user to their permission level.